/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CSVLoaderDialog.java
 *
 * Created on Feb 12, 2013, 11:24:42 AM
 */
package org.glotaran.csvdataloader;

import java.awt.Component;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import org.ujmp.gui.panels.MatrixTableEditorPanel;

/**
 *
 * @author Owner
 */
public class CSVLoaderDialog extends javax.swing.JPanel {

    /** Creates new form CSVLoaderDialog */
    public CSVLoaderDialog() {
        initComponents();
    }
    
    public CSVLoaderDialog(MatrixTableEditorPanel matixEditor) {
        initComponents();
        jpMatrixEditor.add(matixEditor);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jpMatrixEditor = new javax.swing.JPanel();
        cbLabelsInRows = new javax.swing.JCheckBox();
        cbLabelsInColums = new javax.swing.JCheckBox();
        jpCalibration = new javax.swing.JPanel();
        cbWaveCalbration = new javax.swing.JCheckBox();
        rbLoadFromFile = new javax.swing.JRadioButton();
        tfFilename = new javax.swing.JTextField();
        bOpenFile = new javax.swing.JButton();
        cbspectraInRows = new javax.swing.JCheckBox();
        spSkipRows = new javax.swing.JSpinner();
        spSkipColums = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jRadioButton1.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jRadioButton1.text")); // NOI18N

        jpMatrixEditor.setLayout(new java.awt.BorderLayout());

        cbLabelsInRows.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbLabelsInRows.text")); // NOI18N

        cbLabelsInColums.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbLabelsInColums.text")); // NOI18N

        cbWaveCalbration.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbWaveCalbration.text")); // NOI18N
        cbWaveCalbration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbWaveCalbrationActionPerformed(evt);
            }
        });

        rbLoadFromFile.setSelected(true);
        rbLoadFromFile.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.rbLoadFromFile.text")); // NOI18N
        rbLoadFromFile.setEnabled(false);

        tfFilename.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfFilename.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.tfFilename.text")); // NOI18N
        tfFilename.setEnabled(false);

        bOpenFile.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.bOpenFile.text")); // NOI18N
        bOpenFile.setEnabled(false);
        bOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCalibrationLayout = new javax.swing.GroupLayout(jpCalibration);
        jpCalibration.setLayout(jpCalibrationLayout);
        jpCalibrationLayout.setHorizontalGroup(
            jpCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbWaveCalbration)
            .addGroup(jpCalibrationLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jpCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCalibrationLayout.createSequentialGroup()
                        .addComponent(tfFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rbLoadFromFile)))
        );
        jpCalibrationLayout.setVerticalGroup(
            jpCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCalibrationLayout.createSequentialGroup()
                .addComponent(cbWaveCalbration)
                .addGap(3, 3, 3)
                .addComponent(rbLoadFromFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbspectraInRows.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.cbspectraInRows.text")); // NOI18N

        spSkipRows.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        spSkipRows.setName(""); // NOI18N

        spSkipColums.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(CSVLoaderDialog.class, "CSVLoaderDialog.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbLabelsInRows)
                    .addComponent(cbLabelsInColums)
                    .addComponent(cbspectraInRows)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spSkipRows, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spSkipColums, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jpCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpMatrixEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbLabelsInRows)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLabelsInColums)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbspectraInRows)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(spSkipRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(spSkipColums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(jpCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpMatrixEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbWaveCalbrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbWaveCalbrationActionPerformed
        Component[] components = jpCalibration.getComponents();
        for (int i = 0; i < components.length; i++){
            components[i].setEnabled(cbWaveCalbration.isSelected());
        }
        cbWaveCalbration.setEnabled(true);
    }//GEN-LAST:event_cbWaveCalbrationActionPerformed

    private void bOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select file with ...");
        chooser.setMultiSelectionEnabled(false);
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            tfFilename.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_bOpenFileActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bOpenFile;
    private javax.swing.JCheckBox cbLabelsInColums;
    private javax.swing.JCheckBox cbLabelsInRows;
    private javax.swing.JCheckBox cbWaveCalbration;
    private javax.swing.JCheckBox cbspectraInRows;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JPanel jpCalibration;
    private javax.swing.JPanel jpMatrixEditor;
    private javax.swing.JRadioButton rbLoadFromFile;
    private javax.swing.JSpinner spSkipColums;
    private javax.swing.JSpinner spSkipRows;
    private javax.swing.JTextField tfFilename;
    // End of variables declaration//GEN-END:variables

    public boolean isLabelsInColums() {
        return cbLabelsInColums.isSelected();
    }

    public boolean isLabelsInRows() {
        return cbLabelsInRows.isSelected();
    }

    public boolean isWaveCalbrationEnabled() {
        return cbWaveCalbration.isSelected();
    }

    public boolean isSpectraInRows() {
        return cbspectraInRows.isSelected();
    }

    public String getFilename() {
        return tfFilename.getText();
    }
    
    public int getSkipRows() {
         return  ((SpinnerNumberModel)spSkipRows.getModel()).getNumber().intValue();
    }
    
    public int getSkipColums() {
        return ((SpinnerNumberModel)spSkipColums.getModel()).getNumber().intValue();
    }
}

