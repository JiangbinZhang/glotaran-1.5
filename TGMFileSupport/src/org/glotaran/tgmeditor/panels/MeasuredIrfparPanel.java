package org.glotaran.tgmeditor.panels;

import java.awt.Color;
import java.io.File;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;

import org.glotaran.core.messages.CoreErrorMessages;
import org.glotaran.core.models.tgm.IrfparPanelModel;
import org.glotaran.jfreechartcustom.GraphPanel;
import org.glotaran.tgmfilesupport.TgmDataObject;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/*
 * KinIrfparPanel.java
 *
 * Created on August 3, 2008, 11:01 AM
 */
public class MeasuredIrfparPanel extends JPanel implements EventListener {
    private static final long serialVersionUID = 1L;

    private TgmDataObject dObj;
    private IrfparPanelModel irfparPanelModel;
    private JFileChooser fc;
    private int length;
    private int from, till;
    private double maxInt;
    private double[] refArray;
    private ChartPanel chpan;
    private XYSeriesCollection refSerColl;
    private JFreeChart chart;
    private IntervalMarker marker;

    public MeasuredIrfparPanel(TgmDataObject dObj) {
        this.dObj = dObj;
        this.irfparPanelModel = dObj.getTgm().getDat().getIrfparPanel();
        fc = new JFileChooser();
        chpan = null;
        chart = null;
        marker = null;
        maxInt = 0;
        refSerColl = new XYSeriesCollection();

        initComponents();

//=====================measuredIRF
        if (irfparPanelModel.getConvalg() != null) {
            switch (irfparPanelModel.getConvalg()) {
                case 1:
                    jRBScatterConv.setSelected(true);
                    break;
                case 2:
                    jRBScatterConv.setSelected(true);
                    break;
                case 3:
                    jRBReferConv.setSelected(true);
                    break;
                default: {
                    jRBScatterConv.setSelected(true);
                    irfparPanelModel.setConvalg(2);
                    break;
                }
            } //end switch
        } else if (irfparPanelModel.isMirf()) {
            irfparPanelModel.setConvalg(2);
        }
        jCBParmuFixedShift.setSelected(irfparPanelModel.isParmufixed());
        jTRefLifetime.setText(String.valueOf(irfparPanelModel.getReftau()));
        updateEnabled(irfparPanelModel.isMirf());
        jTFIrfShiftParameter.setText(irfparPanelModel.getParmu());
        if (irfparPanelModel.getMeasuredIrf() != null) {
            if (!irfparPanelModel.getMeasuredIrf().isEmpty()) {
                String[] doubles = irfparPanelModel.getMeasuredIrf().split(",");
                XYSeries refSeria = new XYSeries("Reference");
                refArray = new double[doubles.length];
                for (int i = 0; i < doubles.length; i++) {
                    refArray[i] = Double.parseDouble(doubles[i]);
                    refSeria.add(i, refArray[i]);

                }
                refSerColl.addSeries(refSeria);
                MakeChart(refSerColl);
            }
        }



// Add listerners
       
//========meairf=======
//        addModifier(jRBScatterConv);
//        addModifier(jRBReferConv);
//        jRBReferConv.addActionListener(this);
//========meairf=======
//        addModifier(jTRefLifetime);
//        addModifier(jTFIrfShiftParameter);
//        addModifier(jCBParmuFixedShift);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        tFRefFilename = new javax.swing.JTextField();
        Bloadref = new javax.swing.JButton();
        JPChartArea = new javax.swing.JPanel();
        jCBEstimateBG = new javax.swing.JCheckBox();
        jSFrom = new javax.swing.JSpinner();
        jSTill = new javax.swing.JSpinner();
        jTFBGvalue = new javax.swing.JTextField();
        jBSubtrBG = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jBCalculateBG = new javax.swing.JButton();
        jCBNegToZer = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jRBScatterConv = new javax.swing.JRadioButton();
        jRBReferConv = new javax.swing.JRadioButton();
        jTRefLifetime = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTFIrfShiftParameter = new javax.swing.JTextField();
        jCBParmuFixedShift = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(706, 530));
        jPanel7.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jPanel7ComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel7ComponentShown(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel8.setPreferredSize(new java.awt.Dimension(679, 413));

        jLabel11.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jLabel2.text")); // NOI18N

        tFRefFilename.setEditable(false);
        tFRefFilename.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.tFRefFilename.text")); // NOI18N

        Bloadref.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.Bloadref.text")); // NOI18N
        Bloadref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BloadrefActionPerformed(evt);
            }
        });

        JPChartArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        JPChartArea.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JPChartAreaComponentResized(evt);
            }
        });
        JPChartArea.setLayout(new java.awt.BorderLayout());

        jCBEstimateBG.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jCBEstimateBG.text")); // NOI18N
        jCBEstimateBG.setEnabled(false);
        jCBEstimateBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBEstimateBGActionPerformed(evt);
            }
        });

        jSFrom.setEnabled(false);
        jSFrom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSFromStateChanged(evt);
            }
        });

        jSTill.setEnabled(false);
        jSTill.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSTillStateChanged(evt);
            }
        });

        jTFBGvalue.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jTFBGvalue.text")); // NOI18N
        jTFBGvalue.setEnabled(false);

        jBSubtrBG.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jBSubtrBG.text")); // NOI18N
        jBSubtrBG.setEnabled(false);
        jBSubtrBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSubtrBGActionPerformed(evt);
            }
        });

        jLabel12.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jLabel1.text")); // NOI18N
        jLabel12.setEnabled(false);

        jLabel13.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jLabel3.text")); // NOI18N
        jLabel13.setEnabled(false);

        jLabel14.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jLabel4.text")); // NOI18N
        jLabel14.setEnabled(false);

        jBCalculateBG.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jBCalculateBG.text")); // NOI18N
        jBCalculateBG.setEnabled(false);
        jBCalculateBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCalculateBGActionPerformed(evt);
            }
        });

        jCBNegToZer.setSelected(true);
        jCBNegToZer.setText(org.openide.util.NbBundle.getMessage(MeasuredIrfparPanel.class, "MeasuredIrfTopComponent.jCBNegToZer.text")); // NOI18N
        jCBNegToZer.setEnabled(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JPChartArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jCBEstimateBG, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSTill, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jBCalculateBG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFBGvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(10, 10, 10)
                        .addComponent(tFRefFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(Bloadref, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 274, Short.MAX_VALUE)
                        .addComponent(jCBNegToZer)
                        .addGap(18, 18, 18)
                        .addComponent(jBSubtrBG)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tFRefFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bloadref)
                    .addComponent(jBSubtrBG)
                    .addComponent(jCBNegToZer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPChartArea, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTFBGvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBCalculateBG)
                    .addComponent(jLabel12)
                    .addComponent(jSFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jSTill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBEstimateBG))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setEnabled(false);

        buttonGroup3.add(jRBScatterConv);
        jRBScatterConv.setText("Scatter Convolution");
        jRBScatterConv.setEnabled(false);
        jRBScatterConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBScatterConvActionPerformed(evt);
            }
        });

        buttonGroup3.add(jRBReferConv);
        jRBReferConv.setText("Reference convolution");
        jRBReferConv.setEnabled(false);
        jRBReferConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBReferConvActionPerformed(evt);
            }
        });

        jTRefLifetime.setEnabled(false);
        jTRefLifetime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTRefLifetimeActionPerformed(evt);
            }
        });
        jTRefLifetime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTRefLifetimeFocusLost(evt);
            }
        });

        jLabel10.setText("Reference Lifetime (ns)");
        jLabel10.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBReferConv)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTRefLifetime, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRBScatterConv))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jRBReferConv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTRefLifetime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRBScatterConv))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel15.setText("Measured IRF Shift Parameter");

        jTFIrfShiftParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFIrfShiftParameterActionPerformed(evt);
            }
        });
        jTFIrfShiftParameter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFIrfShiftParameterFocusLost(evt);
            }
        });

        jCBParmuFixedShift.setText("Fix");
        jCBParmuFixedShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBParmuFixedShiftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jTFIrfShiftParameter, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBParmuFixedShift)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFIrfShiftParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBParmuFixedShift))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84))
        );

        add(jPanel7, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void BloadrefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BloadrefActionPerformed
        int returnVal = fc.showOpenDialog(this);
        Vector refVector = new Vector();
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            tFRefFilename.setText(fc.getName(file));

            try {
                Scanner sc = new Scanner(file);
                while (sc.hasNext()) {
                    refVector.addElement(sc.nextFloat());
                }
            } catch (Exception e) {
                CoreErrorMessages.fileLoadException("IRF");
            }
            int i = 0;
            float num;
            XYSeries refSeria = new XYSeries("Reference");
            length = refVector.size();
            refArray = new double[length];
            for (Enumeration e = refVector.elements(); e.hasMoreElements();) {
                Float temp = (Float) e.nextElement();
                num = (float) temp;
                refSeria.add(i, num);
                if (num > maxInt) {
                    maxInt = num;
                }
                refArray[i] = num;
                i++;
            }
            if (refSerColl.getSeries().size() > 0) {
                refSerColl.removeAllSeries();
            }
            refSerColl.addSeries(refSeria);
            MakeChart(refSerColl);
            from = 0;
            till = length;
            marker = new IntervalMarker(from, till);
            marker.setPaint(new Color(222, 222, 255, 128));

            jBSubtrBG.setEnabled(true);
            jCBEstimateBG.setEnabled(true);
            jTFBGvalue.setEnabled(true);
            jCBNegToZer.setEnabled(true);

            jSFrom.setModel(new SpinnerNumberModel(from, 0, length, 1));
            jSTill.setModel(new SpinnerNumberModel(till, 0, length, 1));
            //        System.out.println(refVector);
            setValue(JPChartArea, refArray);
        }
    }//GEN-LAST:event_BloadrefActionPerformed

    private void JPChartAreaComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JPChartAreaComponentResized

    }//GEN-LAST:event_JPChartAreaComponentResized

    private void jCBEstimateBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBEstimateBGActionPerformed
        jTFBGvalue.setEditable(!jTFBGvalue.isEditable());
        jSFrom.setEnabled(!jSFrom.isEnabled());
        jSTill.setEnabled(!jSTill.isEnabled());
        jBCalculateBG.setEnabled(!jBCalculateBG.isEnabled());
        if (jCBEstimateBG.isSelected()) {
            chart.getXYPlot().addDomainMarker(marker);
        } else {
            chart.getXYPlot().clearDomainMarkers(0);
        }
    }//GEN-LAST:event_jCBEstimateBGActionPerformed

    private void jSFromStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSFromStateChanged
        Integer fr = (Integer) jSFrom.getValue();
        Integer tl = (Integer) jSTill.getValue();
        from = (int) fr;
        till = (int) tl;
        if (from >= till) {
            jSTill.setValue(jSFrom.getValue());
            till = from;
        }
        marker.setStartValue(from);
        marker.setEndValue(till);
    }//GEN-LAST:event_jSFromStateChanged

    private void jSTillStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSTillStateChanged
        Integer fr = (Integer) jSFrom.getValue();
        Integer tl = (Integer) jSTill.getValue();
        from = (int) fr;
        till = (int) tl;

        if (from >= till) {
            jSFrom.setValue(jSTill.getValue());
            from = till;
        }
        marker.setStartValue(from);
        marker.setEndValue(till);
    }//GEN-LAST:event_jSTillStateChanged

    private void jBSubtrBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSubtrBGActionPerformed
        float val = 0;
        try {
            val = Float.parseFloat(jTFBGvalue.getText());
        } catch (NumberFormatException ex) {
            CoreErrorMessages.numberFormatException();
        }
        if (refSerColl.getSeries().size() > 0) {
            refSerColl.getSeries().clear();
            for (int i = 0; i < length; i++) {
                refArray[i] -= val;
                if (jCBNegToZer.isSelected() && (refArray[i] < 0)) {
                    refArray[i] = 0;
                }
                refSerColl.getSeries(0).add(i, refArray[i]);
            }
            setValue(JPChartArea, refArray);
        }
    }//GEN-LAST:event_jBSubtrBGActionPerformed

    private void jBCalculateBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCalculateBGActionPerformed
        float sum = 0;
        for (int i = from; i < till; i++) {
            sum += refArray[i];
        }
        Float val = sum / (till - from);
        jTFBGvalue.setText(val.toString());
    }//GEN-LAST:event_jBCalculateBGActionPerformed

    private void jPanel7ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel7ComponentShown
        endUIChange();
    }//GEN-LAST:event_jPanel7ComponentShown

    private void jPanel7ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel7ComponentHidden
        endUIChange();
    }//GEN-LAST:event_jPanel7ComponentHidden

    private void jCBParmuFixedShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBParmuFixedShiftActionPerformed
        Boolean value = ((JCheckBox)evt.getSource()).isSelected();
        irfparPanelModel.setParmufixed(value);
        endUIChange();
    }//GEN-LAST:event_jCBParmuFixedShiftActionPerformed

    private void jRBReferConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBReferConvActionPerformed
        // TODO add your handling code here:
         irfparPanelModel.setConvalg(3);
         endUIChange();
    }//GEN-LAST:event_jRBReferConvActionPerformed

    private void jTRefLifetimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTRefLifetimeActionPerformed
        // TODO add your handling code here:
         String newValue = ((JTextField)evt.getSource()).getText();
            if (!newValue.isEmpty()) {
                irfparPanelModel.setReftau(Double.valueOf(newValue));
            } else {
                irfparPanelModel.setReftau(null);
            }
            endUIChange();
    }//GEN-LAST:event_jTRefLifetimeActionPerformed

    private void jRBScatterConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBScatterConvActionPerformed
        // TODO add your handling code here:
          irfparPanelModel.setConvalg(2);
          endUIChange();
    }//GEN-LAST:event_jRBScatterConvActionPerformed

    private void jTFIrfShiftParameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFIrfShiftParameterActionPerformed
        // TODO add your handling code here:
         String newValue = ((JTextField)evt.getSource()).getText();
            if (!newValue.isEmpty()) {
                irfparPanelModel.setParmu(newValue);
            } else {
                irfparPanelModel.setParmu(null);
            }
            endUIChange();
    }//GEN-LAST:event_jTFIrfShiftParameterActionPerformed

    private void jTFIrfShiftParameterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFIrfShiftParameterFocusLost
        // TODO add your handling code here:
        String newValue = ((JTextField)evt.getSource()).getText();
            if (!newValue.isEmpty()) {
                irfparPanelModel.setParmu(newValue);
            } else {
                irfparPanelModel.setParmu(null);
            }
            endUIChange();
    }//GEN-LAST:event_jTFIrfShiftParameterFocusLost

    private void jTRefLifetimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTRefLifetimeFocusLost
        // TODO add your handling code here:
         String newValue = ((JTextField)evt.getSource()).getText();
            if (!newValue.isEmpty()) {
                irfparPanelModel.setReftau(Double.valueOf(newValue));
            } else {
                irfparPanelModel.setReftau(null);
            }
            endUIChange();
    }//GEN-LAST:event_jTRefLifetimeFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bloadref;
    private javax.swing.JPanel JPChartArea;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jBCalculateBG;
    private javax.swing.JButton jBSubtrBG;
    private javax.swing.JCheckBox jCBEstimateBG;
    private javax.swing.JCheckBox jCBNegToZer;
    private javax.swing.JCheckBox jCBParmuFixedShift;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRBReferConv;
    private javax.swing.JRadioButton jRBScatterConv;
    private javax.swing.JSpinner jSFrom;
    private javax.swing.JSpinner jSTill;
    private javax.swing.JTextField jTFBGvalue;
    private javax.swing.JTextField jTFIrfShiftParameter;
    private javax.swing.JTextField jTRefLifetime;
    private javax.swing.JTextField tFRefFilename;
    // End of variables declaration//GEN-END:variables

    public void setValue(JComponent source, Object value) {
        if (source == jCBParmuFixedShift) {
            irfparPanelModel.setParmufixed((Boolean) value);
        }

        if (source == jRBScatterConv) {
            if ((Boolean) value) {
                irfparPanelModel.setConvalg(2);
            }
        }
        if (source == jRBReferConv) {
            if ((Boolean) value) {
                irfparPanelModel.setConvalg(3);
            }
        }
        if (source == jTRefLifetime) {
            String newValue = (String) value;
            if (!newValue.isEmpty()) {
                irfparPanelModel.setReftau(Double.valueOf((String) value));
            } else {
                irfparPanelModel.setReftau(null);
            }
        }
        if (source == JPChartArea) { //measured IRF Changed
            StringBuilder result = new StringBuilder(String.valueOf(refArray[0]));
            for (int i = 1; i < refArray.length; i++) {
                result.append(",").append(refArray[i]);
            }
            irfparPanelModel.setMeasuredIrf(result.toString());
        }
        if (source == jTFIrfShiftParameter) {
            irfparPanelModel.setParmu((String) value);
        }
        endUIChange();
    }

    protected void endUIChange() {// signalUIChange() is deprecated{
         dObj.setModified(true);
    }

    public void linkButtonPressed(Object arg0, String arg1) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public JComponent getErrorComponent(String arg0) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void updateEnabled(boolean selected) {
        jPanel5.setEnabled(!selected);
        for (int i = 0; i < jPanel5.getComponents().length; i++) {
            jPanel5.getComponents()[i].setEnabled(selected);
        }
    }

    private void MakeChart(XYDataset dat) {
        chart = ChartFactory.createXYLineChart(
                "Measured IRF",
                "Channel Number",
                "Number of counts",
                dat,
                PlotOrientation.VERTICAL,
                false,
                false,
                false);
//        chart.getXYPlot().getDomainAxis().setUpperBound(length);
        chart.getXYPlot().getDomainAxis().setUpperMargin(0);
        chart.getXYPlot().getDomainAxis().setLowerMargin(0);
        chart.getXYPlot().setDomainZeroBaselineVisible(true);
        chpan = new GraphPanel(chart);
        JPChartArea.removeAll();
        JPChartArea.add(chpan);
        JPChartArea.validate();
    }    
    
}
