/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OutlierCorrectionDialog.java
 *
 * Created on Nov 1, 2010, 8:56:44 PM
 */

package org.glotaran.core.main.common;

import java.awt.Component;
import java.awt.Container;
import org.glotaran.core.messages.CoreErrorMessages;

/**
 *
 * @author Sergey
 */
public class OutlierCorrectionDialog extends javax.swing.JPanel {

    private final OutlierCorrectionParameters outlierParameters;
    /** Creates new form OutlierCorrectionDialog */
    public OutlierCorrectionDialog() {
        initComponents();
        outlierParameters = new OutlierCorrectionParameters();
        dimPanel1.setPanName("Dimension 1(Times)");
        dimPanel2.setPanName("Dimension 2(Waves)");
        enableDisableControls();
    }

    public OutlierCorrectionDialog(int maxWindowSize) {
        initComponents();
        outlierParameters = new OutlierCorrectionParameters();
        jSWindSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(3), Integer.valueOf(maxWindowSize), Integer.valueOf(1)));
        dimPanel1.setPanName("Dimension 1(Times)");
        dimPanel2.setPanName("Dimension 2(Waves)");
        enableDisableControls();
    }

    /**
     * This method is called from within the constructor to     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPReplaceIndividualOutliers = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSWindSize = new javax.swing.JSpinner();
        jTFFence = new javax.swing.JTextField();
        jPSetRegionToConstantValue = new javax.swing.JPanel();
        jPreplacementValue = new javax.swing.JPanel();
        jLConstValue = new javax.swing.JLabel();
        jTFconstRepVal = new javax.swing.JTextField();
        dimPanel1 = new org.glotaran.core.main.common.DimensionPanel();
        dimPanel2 = new org.glotaran.core.main.common.DimensionPanel();
        jRBReplaceIndividualOutliers = new javax.swing.JRadioButton();
        jRBSetRegionToConstantValue = new javax.swing.JRadioButton();

        setMinimumSize(new java.awt.Dimension(200, 300));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jLabel2.text")); // NOI18N

        jSWindSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(3), null, Integer.valueOf(1)));
        jSWindSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSWindSizeStateChanged(evt);
            }
        });

        jTFFence.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTFFence.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jTFFence.text")); // NOI18N
        jTFFence.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFFenceKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPReplaceIndividualOutliersLayout = new javax.swing.GroupLayout(jPReplaceIndividualOutliers);
        jPReplaceIndividualOutliers.setLayout(jPReplaceIndividualOutliersLayout);
        jPReplaceIndividualOutliersLayout.setHorizontalGroup(
            jPReplaceIndividualOutliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPReplaceIndividualOutliersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPReplaceIndividualOutliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPReplaceIndividualOutliersLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTFFence, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPReplaceIndividualOutliersLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSWindSize, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPReplaceIndividualOutliersLayout.setVerticalGroup(
            jPReplaceIndividualOutliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPReplaceIndividualOutliersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPReplaceIndividualOutliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jSWindSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPReplaceIndividualOutliersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFFence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(24, 24, 24))
        );

        jPreplacementValue.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jPreplacementValue.border.title"))); // NOI18N

        jLConstValue.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jLConstValue.text")); // NOI18N

        jTFconstRepVal.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jTFconstRepVal.text")); // NOI18N
        jTFconstRepVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFconstRepValKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPreplacementValueLayout = new javax.swing.GroupLayout(jPreplacementValue);
        jPreplacementValue.setLayout(jPreplacementValueLayout);
        jPreplacementValueLayout.setHorizontalGroup(
            jPreplacementValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPreplacementValueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLConstValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFconstRepVal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
        );
        jPreplacementValueLayout.setVerticalGroup(
            jPreplacementValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPreplacementValueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPreplacementValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLConstValue)
                    .addComponent(jTFconstRepVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        dimPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dimPanel1PropertyChange(evt);
            }
        });

        dimPanel2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dimPanel2PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPSetRegionToConstantValueLayout = new javax.swing.GroupLayout(jPSetRegionToConstantValue);
        jPSetRegionToConstantValue.setLayout(jPSetRegionToConstantValueLayout);
        jPSetRegionToConstantValueLayout.setHorizontalGroup(
            jPSetRegionToConstantValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSetRegionToConstantValueLayout.createSequentialGroup()
                .addGroup(jPSetRegionToConstantValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPSetRegionToConstantValueLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dimPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dimPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPreplacementValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(216, 216, 216))
        );
        jPSetRegionToConstantValueLayout.setVerticalGroup(
            jPSetRegionToConstantValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSetRegionToConstantValueLayout.createSequentialGroup()
                .addGroup(jPSetRegionToConstantValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jPreplacementValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        buttonGroup1.add(jRBReplaceIndividualOutliers);
        jRBReplaceIndividualOutliers.setSelected(true);
        jRBReplaceIndividualOutliers.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jRBReplaceIndividualOutliers.text")); // NOI18N
        jRBReplaceIndividualOutliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBReplaceIndividualOutliersActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRBSetRegionToConstantValue);
        jRBSetRegionToConstantValue.setText(org.openide.util.NbBundle.getMessage(OutlierCorrectionDialog.class, "OutlierCorrectionDialog.jRBSetRegionToConstantValue.text")); // NOI18N
        jRBSetRegionToConstantValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBSetRegionToConstantValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBReplaceIndividualOutliers, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRBSetRegionToConstantValue)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPSetRegionToConstantValue, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPReplaceIndividualOutliers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(211, 211, 211))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jRBReplaceIndividualOutliers)
                .addGap(0, 0, 0)
                .addComponent(jPReplaceIndividualOutliers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jRBSetRegionToConstantValue)
                .addGap(0, 0, 0)
                .addComponent(jPSetRegionToConstantValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTFFenceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFFenceKeyReleased
       try {
            outlierParameters.setFence(Integer.parseInt(jTFFence.getText()));
        } catch (Exception e) {
            CoreErrorMessages.numberFormatException();
        }
    }//GEN-LAST:event_jTFFenceKeyReleased

    public OutlierCorrectionParameters getOutlierParameters() {
        return outlierParameters;
    }

    private void jRBReplaceIndividualOutliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBReplaceIndividualOutliersActionPerformed
        enableDisableControls();
    }//GEN-LAST:event_jRBReplaceIndividualOutliersActionPerformed

    private void jRBSetRegionToConstantValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBSetRegionToConstantValueActionPerformed
        enableDisableControls();
    }//GEN-LAST:event_jRBSetRegionToConstantValueActionPerformed

    private void jTFconstRepValKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFconstRepValKeyReleased
        if (checkDouble(jTFconstRepVal.getText())){
            outlierParameters.setOcConstValue(Double.parseDouble(jTFconstRepVal.getText()));
        }
    }//GEN-LAST:event_jTFconstRepValKeyReleased

    private void jSWindSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSWindSizeStateChanged
        outlierParameters.setWindowSize((Integer)jSWindSize.getValue());
    }//GEN-LAST:event_jSWindSizeStateChanged

    private void dimPanel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dimPanel1PropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("from")){
            outlierParameters.setOcRegConstD1(0,(double)evt.getNewValue());
        }
        if (evt.getPropertyName().equalsIgnoreCase("to")){
            outlierParameters.setOcRegConstD1(1,(double)evt.getNewValue());
        }
        
    }//GEN-LAST:event_dimPanel1PropertyChange

    private void dimPanel2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dimPanel2PropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("from")){
            outlierParameters.setOcRegConstD2(0,(double)evt.getNewValue());
        }
        if (evt.getPropertyName().equalsIgnoreCase("to")){
            outlierParameters.setOcRegConstD2(1,(double)evt.getNewValue());
        }
    }//GEN-LAST:event_dimPanel2PropertyChange
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private org.glotaran.core.main.common.DimensionPanel dimPanel1;
    private org.glotaran.core.main.common.DimensionPanel dimPanel2;
    private javax.swing.JLabel jLConstValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPReplaceIndividualOutliers;
    private javax.swing.JPanel jPSetRegionToConstantValue;
    private javax.swing.JPanel jPreplacementValue;
    private javax.swing.JRadioButton jRBReplaceIndividualOutliers;
    private javax.swing.JRadioButton jRBSetRegionToConstantValue;
    private javax.swing.JSpinner jSWindSize;
    private javax.swing.JTextField jTFFence;
    private javax.swing.JTextField jTFconstRepVal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setEnabled(boolean enabled) {
        if (enabled) {
            jRBReplaceIndividualOutliers.setEnabled(enabled);
            jRBSetRegionToConstantValue.setEnabled(enabled);
            enableDisableControls();
        } else {
         for (int i = 0; i < getComponentCount(); i++) {
             getComponent(i).setEnabled(enabled);
            }
        }
    }

    private void enableDisableControls() {
        setEnabledRecursively(jPReplaceIndividualOutliers, jRBReplaceIndividualOutliers.isSelected());
        setEnabledRecursively(jPSetRegionToConstantValue, jRBSetRegionToConstantValue.isSelected());
        dimPanel1.setEnabled(jRBSetRegionToConstantValue.isSelected());
        dimPanel2.setEnabled(jRBSetRegionToConstantValue.isSelected());
        
        outlierParameters.setIndividualOutlierC(jRBReplaceIndividualOutliers.isSelected());
        outlierParameters.setRegionValueC(jRBSetRegionToConstantValue.isSelected());
    }

    void setEnabledRecursively(Component component, boolean enabled) {
        component.setEnabled(enabled);
        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                setEnabledRecursively(child, enabled);
            }
        }
    }

    private boolean checkDouble(String number) {
        try {
            Double.parseDouble(number);
            return true;
        } catch (Exception e) {
            CoreErrorMessages.numberFormatException();
            return false;
        }
    }
}
